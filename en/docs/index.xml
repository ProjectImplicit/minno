<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> – Documentation</title>
    <link>/en/docs/</link>
    <description>Recent content in Documentation on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 09 Apr 2016 16:50:16 +0200</lastBuildDate>
    
	  <atom:link href="/en/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>En: Getting started</title>
      <link>/en/docs/start/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>/en/docs/start/</guid>
      <description>
        
        
        &lt;p&gt;Welcome to Minno! We&amp;rsquo;re glad to have you here.
This section describes how you can start developing MinnoJS tasks and deploying them online in no time.&lt;/p&gt;
&lt;p&gt;Creating an online task involves two processes: composing the task, and making it available online.
MinnoJS offers a full suite of tools for accomplishing both of these tasks.&lt;/p&gt;
&lt;h2 id=&#34;composing-a-task&#34;&gt;Composing a task&lt;/h2&gt;
&lt;p&gt;Tasks in MinnoJS are represented by simple text files.
These text files include the instructions needed to implement your task.
You can learn the basics of how to write these instructions in the &lt;a href=&#34;../core&#34;&gt;Core concepts&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;Your study will consist of three types of tasks.
&lt;a href=&#34;../time&#34;&gt;Times sensitive tasks&lt;/a&gt; allow you to create interactive tasks and accurately measure reaction times.
&lt;a href=&#34;../quest&#34;&gt;Questionnaires&lt;/a&gt; create dynamic questionnaires with a variety of pre-made question types.
Finally, the &lt;a href=&#34;../manager&#34;&gt;task manager&lt;/a&gt; is responsible for orchestrating your tasks together.
Additionally, you will want to use the &lt;a href=&#34;../sequencer&#34;&gt;sequencer&lt;/a&gt; in order to control
randomization, branching and much more within any of you tasks.&lt;/p&gt;
&lt;p&gt;A typical study consists of a folder containing several Javascript files (with a &lt;code&gt;*.js&lt;/code&gt; suffix),
and probably a folder with images.
It might look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;study/
  ├── mgr.js
  ├── stroop.js
  ├── rosenberg.js
  └── images/
      ├── red.jpg
      ├── green.jpg
      └── blue.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;making-it-available&#34;&gt;Making it available&lt;/h2&gt;
&lt;p&gt;The next step for getting your study to run is deploying it to the web.
As soon as it is deployed to the web, anyone can access it with their browser.&lt;/p&gt;
&lt;p&gt;People regularly access the web with browsers (such as Chrome, Edge, or Firefox).
But where &lt;em&gt;is&lt;/em&gt; the &amp;ldquo;Web&amp;rdquo;?
The extremely simplistic answer is that the web is composed of a network of servers.
Each server makes some web pages (or other content) available to anyone that request it.
In order for our studies to run, we need them to be hosted on such a server that will make it available on the web.&lt;/p&gt;
&lt;p&gt;MinnoJS provides several solutions for deploying to the web, depending on your needs.&lt;/p&gt;
&lt;p&gt;The full &lt;a href=&#34;server&#34;&gt;Minno Suite&lt;/a&gt; provides an environment for calaboratively developing MinnoJS studies,
including a research dashboard, a study editor, and tools for callaboration and study management.
However, the Minno Suite requires some know how for installation and a server (e.g., one installed by your university IT),
or an account in a cloud service such as Amazon’s Web Services, or DigitalOcean.
It is suitable for a laboratory or an organization that wants to develop and run experiments at a large scale.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/minnojs/simple-minno-server&#34;&gt;simple-minnno-server&lt;/a&gt; provides a simple way to run a single study on a PHP server.
Its big advantage is that PHP servers are easy to set up, and that free servers can be found easily.
However, it does not scale well to multiple studies, and requires direct tinkering with the files.
For detailed instructions on how to set it up see &lt;a href=&#34;/blog/2020/03/12/simple-csv-server&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some commercial sollutions exist that allow direct pluging in of MinnoJS studies.
You can &lt;a href=&#34;/blog/2020/01/01/using-minno-with-qualtrics&#34;&gt;integrate&lt;/a&gt; time sensitive tasks in &lt;a href=&#34;www.qualtrics.com&#34;&gt;Qualtrics&lt;/a&gt;.
And many of the extentions support quatlrics as well.&lt;/p&gt;
&lt;p&gt;Finally, if you just want to test something out you can use the &lt;a href=&#34;/&#34;&gt;playgrounds&lt;/a&gt; on this site for single tasks.
And many times it is useful to run a &lt;a href=&#34;/blog/2020/02/01/develop-localy-with-minnojs&#34;&gt;local server&lt;/a&gt; so that you can get swift feedback on each change that you make.&lt;/p&gt;
&lt;h2 id=&#34;getting-help&#34;&gt;Getting help&lt;/h2&gt;
&lt;p&gt;If you run into trouble, feel free to ask in the MinnoJS &lt;a href=&#34;https://groups.google.com/g/minnojs&#34;&gt;Google-group&lt;/a&gt;, we&amp;rsquo;re really nice, and love to help out.&lt;/p&gt;
&lt;p&gt;And if you run into a bug, please let us know!
We do all the development on &lt;a href=&#34;http://github.com/minnojs&#34;&gt;github&lt;/a&gt;.
Reporting an issue is extremely helpful, and if you can make a pull request - that would be really awesome.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: Core concepts</title>
      <link>/en/docs/core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/docs/core/</guid>
      <description>
        
        
        &lt;p&gt;The tasks we use are created in a simplified Javascript environment.
So we first introduce some very basic &lt;a href=&#34;./javascript&#34;&gt;Javascript&lt;/a&gt; to get you started.&lt;/p&gt;
&lt;p&gt;Structurally, each task is composed of frames (each defined using Javascript).
For instance, the basic frame for miQuest (our questionnaires component) is the page, which holds several sub-frames: the questions.
Each page or question is represented by an object (defined with Javascript).
The programming of a task involves setting the properties of these objects (e.g., set the wording of your question into a question object).
The properties of these objects are discussed in the API section of each of their respective documentation sites.&lt;/p&gt;
&lt;p&gt;You will learn the basics of composing a task from these objects in the &lt;a href=&#34;create&#34;&gt;Creating a task&lt;/a&gt; section.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: Sequencer</title>
      <link>/en/docs/sequencer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/docs/sequencer/</guid>
      <description>
        
        
        &lt;p&gt;Each task presents a sequence of frames/objects.
In its simplest form the task sequence is an ordered list (an array) of frames (e.g., pages in a questionnaire), and it activates them one after the other.
There are several ways that you can control the sequence order (e.g., random selection of questionnaire questions).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: Time sensitive tasks</title>
      <link>/en/docs/time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/docs/time/</guid>
      <description>
        
        
        &lt;p&gt;Minno-time builds and runs experiments with time-sensitive tasks over the Internet. It is written in JavaScript and is built to be extremely versatile and customizable.
Researchers can program their own studies by writing scripts in a language that miTime can understand. Those scripts are written as JavaScript objects. This format allows writing simple and straightforward scripts using a constrained scripting language. The format also allows advanced users to easily create complex and dynamic scripts using in-line JavaScript.&lt;/p&gt;
&lt;h3 id=&#34;central-concepts&#34;&gt;Central Concepts&lt;/h3&gt;
&lt;p&gt;The player treats each task as a &lt;strong&gt;sequence&lt;/strong&gt; of &lt;strong&gt;trials&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Trials&lt;/strong&gt; do three things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Control stimuli presentation&lt;/li&gt;
&lt;li&gt;Evaluate user responses&lt;/li&gt;
&lt;li&gt;Respond to user responses (give feedback, hide a stimulus, finish trial, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Trials are implemented with a &lt;strong&gt;Trial&lt;/strong&gt; object. The Trial object is responsible for anything that &amp;lsquo;happens&amp;rsquo; in the trial (e.g., presentation of stimuli). The trial object uses several other objects, the most important of them are the &lt;strong&gt;Stimulus&lt;/strong&gt; and the &lt;strong&gt;Media&lt;/strong&gt; objects. &lt;strong&gt;Media&lt;/strong&gt; objects are responsible for what we show the user (text, images or any other form of media). &lt;strong&gt;Stimuli&lt;/strong&gt; objects are responsible for how we show the media objects. For instance, the &lt;strong&gt;Stimulus&lt;/strong&gt; objects controls the size and location of the presentation of a media object. Each stimulus includes one Media object. A Trial object may have multiple stimulus objects (to allow you showing a few different stimuli in the same trial).&lt;/p&gt;
&lt;p&gt;Trials, Stimuli and Media are the main building blocks of your task. Often, you will want to group them into &lt;strong&gt;Sets&lt;/strong&gt;. The Sets are used to organize and randomize their members.&lt;/p&gt;
&lt;p&gt;There cannot be more than one trial at a time, and each trial can change just about anything in the player&amp;rsquo;s behavior. To program a task you need to define the trial &lt;strong&gt;sequences&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trials within a sequence may be duplicated, reordered and randomly selected.&lt;/li&gt;
&lt;li&gt;Trials can be created by inheriting some features from another trial.&lt;/li&gt;
&lt;li&gt;Trials may be randomly selected from custom lists (sets).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;creating-a-task&#34;&gt;Creating a Task&lt;/h3&gt;
&lt;p&gt;When creating a task you first create your building blocks. You create prototypes for each trial type you intend to use and create sets of stimuli for later use.
Next, you drop the building blocks into the sequence; at this stage you decide on the global structure of your task and create the exact randomization that you want.&lt;/p&gt;
&lt;p&gt;Once your script is ready all you have to do is to call it from within the player index page.&lt;/p&gt;
&lt;h3 id=&#34;collecting-the-data&#34;&gt;Collecting the data&lt;/h3&gt;
&lt;p&gt;All the data that is recorded by the player is sent to a URL of your choosing.
Tasks may vary greatly so we give you the flexibility to send whatever data you need and process it however you see fit.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: Questionnaires</title>
      <link>/en/docs/quest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/docs/quest/</guid>
      <description>
        
        
        &lt;p&gt;miQuest is written in JavaScript and is built to be extremely versatile and customizable.
The scripts are written as JavaScript objects.
This format allows writing simple and straightforward scripts using a constrained scripting language.
The format also allows advanced users to easily create complex and dynamic scripts using in-line JavaScript.&lt;/p&gt;
&lt;h3 id=&#34;central-concepts&#34;&gt;Central concepts&lt;/h3&gt;
&lt;p&gt;The player treats each questionnaire as &lt;strong&gt;sequence&lt;/strong&gt; of &lt;strong&gt;pages&lt;/strong&gt;. Each page may have one or more &lt;strong&gt;questions&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The pages are set into a sequence and presented sequentially.
This is essentially all you need to know in order to start writing questionnaires.&lt;/p&gt;
&lt;p&gt;Questionnaires are created by writing a Java-script object that has several property objects: &lt;code&gt;settings&lt;/code&gt;, &lt;code&gt;sequence&lt;/code&gt;, &lt;code&gt;pages&lt;/code&gt;, &lt;code&gt;questions&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt; and &lt;code&gt;current&lt;/code&gt;.
Some of these properties have to do with advanced uses of the player.
The only objects that you &lt;strong&gt;have&lt;/strong&gt; to know are &lt;code&gt;sequence&lt;/code&gt; and &lt;code&gt;settings&lt;/code&gt;. We&amp;rsquo;ll first show a simple questionnaire, then go through each of the more advanced options.&lt;/p&gt;
&lt;h3 id=&#34;a-short-introduction&#34;&gt;A short introduction&lt;/h3&gt;
&lt;p&gt;The basic unit in PIquest&amp;rsquo;s scripts is the page.
A page represents one screen in the questionnaire.
A page can have a few properties to define its settings, and, most importantly, a list of one or more questions that will be displayed in the page.
Here is the most basic page.
It only has the &lt;code&gt;questions&lt;/code&gt; property. It creates a simple page with no header/progress-bar/decline button, and other features.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;questions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; []
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are plenty of additional features that &lt;a href=&#34;api/pages&#34;&gt;pages have&lt;/a&gt;, but this is the very minimum that you&amp;rsquo;ll need.&lt;/p&gt;
&lt;p&gt;You also need to define the questions. There are several &lt;a href=&#34;api/questions&#34;&gt;types of questions&lt;/a&gt;. All share a few basic properties.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;myQuestName&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;stem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What would you like to know?&amp;#39;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;type&lt;/code&gt; of question is the first decision that you have to make, it defines the question type and interface. This is where you decide if you want the user to enter some text, choose from a list or use a slider. The &lt;code&gt;name&lt;/code&gt; is the question&amp;rsquo;s name to save when logged to the server. The name also allows you to refer to the question from other objects. Finally, &lt;code&gt;stem&lt;/code&gt; is the text that will be displayed.&lt;/p&gt;
&lt;p&gt;The question in the example above shows a text input with the question &amp;lsquo;What would you like to know?&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;Here is an example of a &lt;code&gt;selectOne&lt;/code&gt; question that prompts the user to choose one response out of a list of answers: red, blue or green.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;selectOne&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mySelectQuest&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;stem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What color is the sky?&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;answers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we know how to create questions, let&amp;rsquo;s create the sequence. The main component of your questionnaire will always be the sequence. The sequence describes the course of your questionnaire; most of the time it is possible to create everything that you want just within the sequence (i.e., define all the pages and all the questions when you define the sequence). The sequence is a javascript array of page objects that are activated one after the other. The following sequence includes two pages, the first has two questions, the second only one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sequence&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#75715e&#34;&gt;// 1. This is a page object
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
        &lt;span style=&#34;color:#75715e&#34;&gt;// It has a questions property
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;questions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;[
            &lt;span style=&#34;color:#75715e&#34;&gt;// 1a. This is the first question (a text input):
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;,
                &lt;span style=&#34;color:#a6e22e&#34;&gt;stem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What is your name?&amp;#39;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#75715e&#34;&gt;// 1b. This is a second question (a select one input)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;selectOne&amp;#39;&lt;/span&gt;,
                &lt;span style=&#34;color:#a6e22e&#34;&gt;stem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;How are you?&amp;#39;&lt;/span&gt;,
                &lt;span style=&#34;color:#a6e22e&#34;&gt;answers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;good&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fair&amp;#39;&lt;/span&gt; ,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bad&amp;#39;&lt;/span&gt;]
            }
        ]
    },
    &lt;span style=&#34;color:#75715e&#34;&gt;// 2. This is the second page object
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
        &lt;span style=&#34;color:#75715e&#34;&gt;// It has the same structure as the previous one
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;questions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;[
            &lt;span style=&#34;color:#75715e&#34;&gt;// 2a. But only one question
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;,
                &lt;span style=&#34;color:#a6e22e&#34;&gt;stem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What is your name again?&amp;#39;&lt;/span&gt;
            }
        ]
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The sequence also supports randomization and branching. Read about it &lt;a href=&#34;/docs/sequencer/mixer&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now that we&amp;rsquo;ve created the sequence, let&amp;rsquo;s put it into the player. The first and last two lines are the same for all scripts (they have to do with the way Javascript works), you can simply ignore them. The &lt;code&gt;API&lt;/code&gt; object assists you in putting your script together, you will &lt;a href=&#34;API.html#API&#34;&gt;eventually&lt;/a&gt; learn more about its functionality, but for now we only need to know that the &lt;code&gt;addSequence&lt;/code&gt; function is responsible for adding pages into the sequence. You may call it as many times as you like.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;define&lt;/span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;questAPI&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;quest&lt;/span&gt;){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;API&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quest&lt;/span&gt;();

    &lt;span style=&#34;color:#a6e22e&#34;&gt;API&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addSequence&lt;/span&gt;([
        {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;questions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;[
                {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;,
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;stem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What is your name?&amp;#39;&lt;/span&gt;
                },
                {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;selectOne&amp;#39;&lt;/span&gt;,
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;stem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;How are you?&amp;#39;&lt;/span&gt;,
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;answers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;good&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fair&amp;#39;&lt;/span&gt; ,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bad&amp;#39;&lt;/span&gt;]
                }
            ]
        },
        {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;questions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;[
                {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;,
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;stem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What is your name again?&amp;#39;&lt;/span&gt;
                }
            ]
        }
    ]);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;API&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;script&lt;/span&gt;;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it! PIquest has loads of additional features (as you can read below), but this was the very basic information that you must know first.
(by the way, if you want to log the responses to your questions you should learn about the &lt;a href=&#34;api/settings#logger&#34;&gt; logger setting &lt;/a&gt;).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: Study manager</title>
      <link>/en/docs/manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/docs/manager/</guid>
      <description>
        
        
        &lt;p&gt;miManager is a player intent on presenting a series of tasks to the users. It uses the same overall API used throught the project implicit tasks.&lt;/p&gt;
&lt;p&gt;It is written in JavaScript and is built to be extremely versatile and customizable.
The scripts are written as JavaScript objects.
This format allows writing simple and straightforward scripts using a constrained scripting language.
The format also allows advanced users to easily create complex and dynamic scripts using in-line JavaScript.&lt;/p&gt;
&lt;h3 id=&#34;central-concepts&#34;&gt;Central concepts&lt;/h3&gt;
&lt;p&gt;The basic unit it PImanager scripts is the task.
A task is represented by a single object, the properties of the object define the task to be activated and some settings relevant to it.
Tasks are organized and presented using the task sequence.
The sequence is an ordered list of tasks.&lt;/p&gt;
&lt;p&gt;Within the sequence you can use several tools in order to control the flow of your tasks.
&lt;a href=&#34;../basics/sequencer.html#mixer&#34;&gt;mixers&lt;/a&gt; control the order in which your tasks are presented (and allow you to change the sequence conditionally).
&lt;a href=&#34;../basics/sequencer.html#inheritance&#34;&gt;inheritance&lt;/a&gt; allows abstracting tasks and makes them shorter, simpler, more dynamic, and most important, reusable.
And finally &lt;a href=&#34;../basics/sequencer.html#templates&#34;&gt;templates&lt;/a&gt; allow you to micro manage the style of your tasks.&lt;/p&gt;
&lt;h3 id=&#34;tasks&#34;&gt;Tasks&lt;/h3&gt;
&lt;p&gt;There are four types of tasks built into miManager &lt;a href=&#34;../quest/overview.html&#34;&gt;miQuest&lt;/a&gt;, &lt;a href=&#34;/mino-time/0.3/tutorials/overview.html&#34;&gt;miTime&lt;/a&gt;, &lt;a href=&#34;messages.html&#34;&gt;messages&lt;/a&gt; and &lt;a href=&#34;post.html&#34;&gt;post&lt;/a&gt;.
You can run new tasks in several ways (see the &lt;a href=&#34;API.html#tasks&#34;&gt;API&lt;/a&gt;).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: Resources</title>
      <link>/en/docs/resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/docs/resources/</guid>
      <description>
        
        
        &lt;h3 id=&#34;education&#34;&gt;Education&lt;/h3&gt;
&lt;p&gt;Here are some presentations good for introducing the essentials of the PI system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A lab presentation about integrating miManager with Project implicit, including comparison to &lt;code&gt;expt&lt;/code&gt; files: &lt;a href=&#34;http://slides.com/andydzik/deck&#34;&gt;presentation&lt;/a&gt;, &lt;a href=&#34;https://dw2.psyc.virginia.edu/implicit/showfiles.jsp?user=andy&amp;amp;study=sample/pimanager&#34;&gt;sample study&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;http://eladzlot.github.io/pi-presentations/basics.html&#34;&gt;presentation&lt;/a&gt; focused on various features of the sequencer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;extensions&#34;&gt;Extensions&lt;/h3&gt;
&lt;p&gt;The PI tasks are easily extensible.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.bgu.ac.il/~baranany/&#34;&gt;Yoav Bar-Anan&lt;/a&gt; from &lt;a href=&#34;https://implicit.harvard.edu/implicit/aboutus.html&#34;&gt;Project Implicit&lt;/a&gt;
has created several extensions for the easy creation of a few common reaction-time tasks.
You can find the instructions for using them right &lt;a href=&#34;https://git.io/JvE5H&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
